include:
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - template: Jobs/Code-Quality.gitlab-ci.yml

default:
  image: docker:24.0.5

stages:
  - test
  - build_docker
  - deploy_prd

sast:
  stage: test


build_docker:
  stage: build_docker
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    IMAGE: "dataplatform-ndp-ingestion"
    # DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker login $ACR_REGISTRY -u $ACR_USER -p $ACR_PASSWORD
    - docker info
  script:
    - docker build --build-arg API_TOKEN=$API_TOKEN -t $ACR_REGISTRY/$IMAGE:${CI_COMMIT_SHORT_SHA} .
    - docker push $ACR_REGISTRY/$IMAGE:${CI_COMMIT_SHORT_SHA}
  only:
    refs:
      - main

deploy_prd:
  stage: deploy_prd 
  image: alpine:latest
  only:
    refs:
      - main
  variables:
    NAMESPACE: dataplatform-ingestion
    RAW_BUCKET_NAME: bucket-prd-data-platform-raw-01
    BUCKET_PV_NAME: bucket-prd-data-platform-ingestion-data-01
    LOCAL_TEMP_FOLDER: mnt/ncs-ingestion-temp-file
    ACR_EMAIL: ServicePrincipal@AzureRM
  tags:
    - winn-deploy
  before_script:
    - |
      # Set environment variables based on environment
      RABBIT_USER=$(echo -n "$RABBIT_USER_PRD" | base64) 
      RABBIT_PASS=$(echo -n "$RABBIT_PASS_PRD" | base64)
      RABBIT_HOST=$(echo -n "$RABBIT_HOST_PRD" | base64) 
      RABBIT_VIRTUAL_HOST=$(echo -n "$RABBIT_VIRTUAL_HOST_PRD" | base64)
      HWC_ACCESS_KEY=$(echo -n "$HWC_ACCESS_KEY_PRD" | base64)
      HWC_SECRET_KEY=$(echo -n "$HWC_SECRET_KEY_PRD" | base64)
      REGISTRY_STRING=$(echo -n "{\"auths\":{\"$ACR_REGISTRY\":{\"username\":\"$ACR_USER\",\"password\":\"$ACR_PASSWORD\",\"email\":\"$ACR_EMAIL\",\"auth\":\"$(echo -n \"$ACR_USER:$ACR_PASSWORD\" | base64 | tr -d '\n')\"}}}" | base64 | tr -d '\n')

  script:
    - |    
      mkdir temp/
      envsubst < k8s/app-secrets.yaml > temp/app-secrets.yaml
      envsubst < k8s/app-vars.yaml > temp/app-vars.yaml
      envsubst < k8s/deployment.yml > temp/deployment.yml
      envsubst < k8s/registry-secrets.yml > temp/registry-secrets.yml
      envsubst < k8s/shared-pv.yaml > temp/shared-pv.yaml
      envsubst < k8s/shared-pvc.yaml > temp/shared-pvc.yaml
      envsubst < k8s/obs-secret.yaml > temp/obs-secret.yaml
      cat "$PRD_KUBE_CONFIG" > kubeconfig.yaml
      kubectl --kubeconfig kubeconfig.yaml create namespace $NAMESPACE || echo "namespace $NAMESPACE ja existe"
      kubectl --kubeconfig kubeconfig.yaml -n $NAMESPACE apply -f temp/
      